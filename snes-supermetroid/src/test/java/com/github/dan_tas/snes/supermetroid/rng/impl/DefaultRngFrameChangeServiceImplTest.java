package com.github.dan_tas.snes.supermetroid.rng.impl;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.github.dan_tas.snes.supermetroid.rng.RngFrameChangeService;
import com.github.dan_tas.snes.supermetroid.rng.RngService;

class DefaultRngFrameChangeServiceImplTest {
  private RngService lcgRngService = new LcgRngServiceImpl();
  private RngService xbaRngService = new XbaRngServiceImpl();

  private RngFrameChangeService rngFrameChangeService;

  @BeforeEach void onSetupTest() {
    rngFrameChangeService = new DefaultRngFrameChangeServiceImpl(lcgRngService, xbaRngService);
  }

  /* @Test */ void demoRngFrameChangeService() throws FileNotFoundException {
    // Output was generated by src/test/resources/rng-logger/lsnes-rng-logger.lua
    String filename = "src/test/resources/rng-logger/sniq-100p-rng-log-leaving-lower-norfair.txt";
    File file = new File(filename);

    try (Scanner scanner = new Scanner(file)) {
      int previousFrame = scanner.nextInt();
      int rngPreviousFrame = scanner.nextInt(0x10);
        while (scanner.hasNextLine()) {
          int nextFrame = scanner.nextInt();
          Integer rngNextFrame = scanner.nextInt(0x10);

          String rngChanges = rngFrameChangeService.describeRngChanges(rngPreviousFrame, rngNextFrame);
          System.out.println(String.format("%06d %04X: %s", previousFrame, rngPreviousFrame, rngChanges));

          previousFrame = nextFrame;
          rngPreviousFrame = rngNextFrame;
       }
    }
  }

  @Test void sameRng() {
    String rngChanges = rngFrameChangeService.describeRngChanges(0x0000, 0x0000);

    assertEquals("NOP", rngChanges);
  }

  @Test void lcgOnce() {
    int rngFrameStart = 0x5555; // 5555 -> ABBA
    int rngFrameEnd = lcgRngService.advanceRng(rngFrameStart);

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("LCG", rngChanges);
  }

  @Test void lcgTwice() {
    int rngFrameStart = 0x6643;

    int workingRng = rngFrameStart; // 6643 -> 0061 -> 02F6
    workingRng = lcgRngService.advanceRng(workingRng);
    workingRng = lcgRngService.advanceRng(workingRng);

    int rngFrameEnd = workingRng;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals(rngChanges, "LCG LCG");
  }

  @Test void draygonItemDrops() {
    int rngFrameStart = 0xE03C;
    int rngFrameEnd = 0x4D9D;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG", rngChanges);
  }

  @Test void lcgThenXbaDifferentValueAfterXba() {
    int rngFrameStart = 0x3A63;

    int workingRng = rngFrameStart; // 3A63 -> 2500 -> 0025
    workingRng = lcgRngService.advanceRng(workingRng);
    workingRng = xbaRngService.advanceRng(workingRng);
    int rngFrameEnd = workingRng;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("LCG XBA", rngChanges);
  }



  @Test void lcgThenXbaSameValueAfterXba() {
    int rngFrameStart = 0xAA74; // AA74 -> 5555 -> 5555

    int workingRng = rngFrameStart;
    workingRng = lcgRngService.advanceRng(workingRng);
    workingRng = xbaRngService.advanceRng(workingRng);

    int rngFrameEnd = workingRng;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    // The LCG then XBA usually happens for 15 frames in a row while on an elevator
    // Either this needs to be wrong, or extra XBA needs to be added on just LCG
    // I think this is the lesser of the two evils
    assertNotEquals(rngChanges, "LCG XBA");
    assertEquals(rngChanges, "LCG");
  }

  @Test void xbaOnly() {
    int rngFrameStart = 0x6100;
    int rngFrameEnd = 0x0061;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("XBA", rngChanges);
  }

  @Test void xbaThenLcgOnce() {
    int rngFrameStart = 0x3663; // 3663 -> 1100 -> 0011

    int workingRng = rngFrameStart;
    workingRng = xbaRngService.advanceRng(workingRng);
    workingRng = lcgRngService.advanceRng(workingRng);

    int rngFrameEnd = workingRng;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("XBA LCG", rngChanges);
  }

  @Test void xbaThenLcgTwice() {
    int rngFrameStart = 0xAA51; // AA51 -> 51AA -> 9963 -> 0000

    int workingRng = rngFrameStart;
    workingRng = xbaRngService.advanceRng(workingRng);
    workingRng = lcgRngService.advanceRng(workingRng);
    workingRng = lcgRngService.advanceRng(workingRng);

    int rngFrameEnd = workingRng;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("XBA LCG LCG", rngChanges);
  }

  @Test void xbaThenLcgThenXba() {
    int rngFrameStart = 0x8464;

    int workingRng = rngFrameStart; // 8464 -> 6484 -> F7A5 -> A5F7
    workingRng = xbaRngService.advanceRng(workingRng);
    workingRng = lcgRngService.advanceRng(workingRng);
    workingRng = xbaRngService.advanceRng(workingRng);
    int rngFrameEnd = workingRng;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("XBA LCG XBA", rngChanges);
  }

  @Test void ridleyDrops() {
    int rngFrameStart = 0x3632;
    int rngFrameEnd = 0xD67F;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("XBA LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG LCG", rngChanges);
  }

  @Test void frame4() {
    int rngFrameStart = 0x5555;
    int rngFrameEnd = 0x0000;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("RNG went from 5555 to 0000, usually happens on frame 000004", rngChanges);

  }

  @Test void frame262() {
    int rngFrameStart = 0x0000;
    int rngFrameEnd = 0x0061;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("RNG set to initial value: 0061", rngChanges);
  }

  @Test void enterRoomWithBeetom() {
    int rngFrameStart = 0x0AA7;
    int rngFrameEnd = 0x0017;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("Entered a room with beetoms", rngChanges);
  }

  @Test void enterRoomWithPolyp() {
    int rngFrameStart = 0x1432;
    int rngFrameEnd = 0x0011;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("Entered a room with polyps", rngChanges); // rock volcano things en route to Lower Norfair from Wave beam area

  }

  @Test void enterRoomWithSidehopper() {
    int rngFrameStart = 0x5D31;
    int rngFrameEnd = 0x01CA;

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("Entered a room with sidehoppers, then LCG", rngChanges);
  }

  @Test void loseRngCycle() {
    /*
     * See cpadolf 100% TAS frame 208847. The instruction to update the RNG value, STA $05E5,
     * happens across a frame boundary. The LSB of RNG is updated as the last cycle of frame
     * 208847. The MSB of RNG is updated as the first cycle of frame 208848.
     */
    int rngFrameStart = 0xEC3F; // EC3F -> 9E4C
    int rngFrameEnd = 0xEC4C; // See cpado

    String rngChanges = rngFrameChangeService.describeRngChanges(rngFrameStart, rngFrameEnd);

    assertEquals("Lost the RNG cycle going from RNG EC3F to RNG EC4C", rngChanges);
  }
}
